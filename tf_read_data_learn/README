以从文件中读取.csv格式的数据到tensorflow中为例子，其它格式的文件读取步骤类似。
编程中总结出来的问题：
1.python中的input命令，默认返回的是string，如果想要用该返回值做一些操作，请注意返回变量的类型。
2.python创建函数时，要将有默认参数的形参放到所有形参的最后面，否则会出non-default argument follows default argument错误。
3.tf.__version__查看安装的tensorflow版本； pip3 upgrade tensorflow 更新tensorflow至最高版本
4.python中的区别
  pass :不做任何事情，只起到占位的作用
  continue: 跳出本次循环（跳出该次循环，继续下一次循环，知道满足循环结束条件，结束循环）
  break：不管循环结束条件如何，结束整个循环
  exit（）：结束整个程序
5.在函数调用时，保持调用格式的一致，如choose(i, batch_size, value)或choose(i=.., batch_size=.., value=..),如果调用格式混合使用，将会出现positional argument follows keyword argument错误。
6.数据读取大致步骤：具体实现看程序
  # 准备数据文件 在想要创建文件的目录下启动终端，输入下面的代码
    echo -e "Alpha1,A1\nAlpha2,A2\nAlpha3,A3">A.csv
    echo -e "Bee1,B1\nBee2,B2\nBee3,B3">B.csv
    echo -e "Sea1,C1\nSea2,C2\nSea3,C3">C.csv
    echo -e "1,1,1,1,1\n0,1,0,1,0\n0,0,1,0,1\n1,0,0,1,0\n0,0,0,0,0">D.csv
  # 生成一个先入先出队列和一个Queuerunner，生成文件名队列
    filename_queue = tf.train.string_input_producer(filename, shuffle=False)
  # 定义reader
    reader = tf.TextLineReader()
    key, value = reader.read(filename_queue)
  # 定义 decoder
    example, label = tf.decode_csv(value, record_defaults=[['null'], ['null']])  # ['null']解析为string类型 ，[1]为整型，[1.0]解析为浮点。
    example_batch, label_batch = tf.train.batch([example, label], batch_size=batch_size, capacity=capacity, num_threads=num_threads)  # 保证样本和标签一一对应  正常顺序
  # 运行图
    with tf.Session() as sess:
        coord = tf.train.Coordinator()  # 创建一个协调器，管理线程
        threads = tf.train.start_queue_runners(coord=coord)  # 启动QueueRunner，此时文件名队列已经进队
        for i in range(num_input):
            e_val, l_val = sess.run(e_l_list)
            print(e_val, l_val)
        coord.request_stop()
        coord.join(threads)

参考资料：https://blog.csdn.net/xuan_zizizi/article/details/78400839
        https://zhuanlan.zhihu.com/p/27238630
        https://blog.csdn.net/u010329292/article/details/68484485